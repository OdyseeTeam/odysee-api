// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUploads(t *testing.T) {
	t.Parallel()

	query := Uploads()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUploadsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Uploads().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UploadExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Upload exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UploadExists to return true, but got false.")
	}
}

func testUploadsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uploadFound, err := FindUpload(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if uploadFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUploadsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Uploads().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUploadsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Uploads().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUploadsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uploadOne := &Upload{}
	uploadTwo := &Upload{}
	if err = randomize.Struct(seed, uploadOne, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadTwo, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = uploadOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Uploads().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUploadsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uploadOne := &Upload{}
	uploadTwo := &Upload{}
	if err = randomize.Struct(seed, uploadOne, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadTwo, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = uploadOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uploadBeforeInsertHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadAfterInsertHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadAfterSelectHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadBeforeUpdateHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadAfterUpdateHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadBeforeDeleteHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadAfterDeleteHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadBeforeUpsertHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func uploadAfterUpsertHook(e boil.Executor, o *Upload) error {
	*o = Upload{}
	return nil
}

func testUploadsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Upload{}
	o := &Upload{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uploadDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Upload object: %s", err)
	}

	AddUploadHook(boil.BeforeInsertHook, uploadBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uploadBeforeInsertHooks = []UploadHook{}

	AddUploadHook(boil.AfterInsertHook, uploadAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uploadAfterInsertHooks = []UploadHook{}

	AddUploadHook(boil.AfterSelectHook, uploadAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uploadAfterSelectHooks = []UploadHook{}

	AddUploadHook(boil.BeforeUpdateHook, uploadBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uploadBeforeUpdateHooks = []UploadHook{}

	AddUploadHook(boil.AfterUpdateHook, uploadAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uploadAfterUpdateHooks = []UploadHook{}

	AddUploadHook(boil.BeforeDeleteHook, uploadBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uploadBeforeDeleteHooks = []UploadHook{}

	AddUploadHook(boil.AfterDeleteHook, uploadAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uploadAfterDeleteHooks = []UploadHook{}

	AddUploadHook(boil.BeforeUpsertHook, uploadBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uploadBeforeUpsertHooks = []UploadHook{}

	AddUploadHook(boil.AfterUpsertHook, uploadAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uploadAfterUpsertHooks = []UploadHook{}
}

func testUploadsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(uploadColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadOneToOnePublishQueryUsingPublishQuery(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var foreign PublishQuery
	var local Upload

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.UploadID = local.ID
	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PublishQuery().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UploadID != foreign.UploadID {
		t.Errorf("want: %v, got %v", foreign.UploadID, check.UploadID)
	}

	slice := UploadSlice{&local}
	if err = local.L.LoadPublishQuery(tx, false, (*[]*Upload)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PublishQuery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PublishQuery = nil
	if err = local.L.LoadPublishQuery(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PublishQuery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUploadOneToOneSetOpPublishQueryUsingPublishQuery(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Upload
	var b, c PublishQuery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publishQueryDBTypes, false, strmangle.SetComplement(publishQueryPrimaryKeyColumns, publishQueryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publishQueryDBTypes, false, strmangle.SetComplement(publishQueryPrimaryKeyColumns, publishQueryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PublishQuery{&b, &c} {
		err = a.SetPublishQuery(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PublishQuery != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Upload != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.UploadID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := PublishQueryExists(tx, x.UploadID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.UploadID {
			t.Error("foreign key was wrong value", a.ID, x.UploadID)
		}

		if _, err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testUploadToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Upload
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UploadSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Upload)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUploadToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Upload
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Uploads[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUploadToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Upload
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Uploads) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUploadsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUploadsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUploadsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Uploads().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uploadDBTypes = map[string]string{`ID`: `text`, `UserID`: `integer`, `Path`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Status`: `enum.upload_status('created','uploading','received','terminated','abandoned','failed','finished')`, `Error`: `text`, `Size`: `bigint`, `Received`: `bigint`}
	_             = bytes.MinRead
)

func testUploadsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uploadPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uploadAllColumns) == len(uploadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUploadsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uploadAllColumns) == len(uploadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Upload{}
	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadDBTypes, true, uploadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uploadAllColumns, uploadPrimaryKeyColumns) {
		fields = uploadAllColumns
	} else {
		fields = strmangle.SetComplement(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UploadSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUploadsUpsert(t *testing.T) {
	t.Parallel()

	if len(uploadAllColumns) == len(uploadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Upload{}
	if err = randomize.Struct(seed, &o, uploadDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Upload: %s", err)
	}

	count, err := Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uploadDBTypes, false, uploadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Upload: %s", err)
	}

	count, err = Uploads().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
