// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUploadQueries(t *testing.T) {
	t.Parallel()

	query := UploadQueries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUploadQueriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadQueriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UploadQueries().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadQueriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadQuerySlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadQueriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UploadQueryExists(tx, o.UploadID)
	if err != nil {
		t.Errorf("Unable to check if UploadQuery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UploadQueryExists to return true, but got false.")
	}
}

func testUploadQueriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uploadQueryFound, err := FindUploadQuery(tx, o.UploadID)
	if err != nil {
		t.Error(err)
	}

	if uploadQueryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUploadQueriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UploadQueries().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUploadQueriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UploadQueries().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUploadQueriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uploadQueryOne := &UploadQuery{}
	uploadQueryTwo := &UploadQuery{}
	if err = randomize.Struct(seed, uploadQueryOne, uploadQueryDBTypes, false, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadQueryTwo, uploadQueryDBTypes, false, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = uploadQueryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadQueryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadQueries().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUploadQueriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uploadQueryOne := &UploadQuery{}
	uploadQueryTwo := &UploadQuery{}
	if err = randomize.Struct(seed, uploadQueryOne, uploadQueryDBTypes, false, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadQueryTwo, uploadQueryDBTypes, false, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = uploadQueryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadQueryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uploadQueryBeforeInsertHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryAfterInsertHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryAfterSelectHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryBeforeUpdateHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryAfterUpdateHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryBeforeDeleteHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryAfterDeleteHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryBeforeUpsertHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func uploadQueryAfterUpsertHook(e boil.Executor, o *UploadQuery) error {
	*o = UploadQuery{}
	return nil
}

func testUploadQueriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UploadQuery{}
	o := &UploadQuery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UploadQuery object: %s", err)
	}

	AddUploadQueryHook(boil.BeforeInsertHook, uploadQueryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uploadQueryBeforeInsertHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.AfterInsertHook, uploadQueryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uploadQueryAfterInsertHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.AfterSelectHook, uploadQueryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uploadQueryAfterSelectHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.BeforeUpdateHook, uploadQueryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uploadQueryBeforeUpdateHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.AfterUpdateHook, uploadQueryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uploadQueryAfterUpdateHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.BeforeDeleteHook, uploadQueryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uploadQueryBeforeDeleteHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.AfterDeleteHook, uploadQueryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uploadQueryAfterDeleteHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.BeforeUpsertHook, uploadQueryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uploadQueryBeforeUpsertHooks = []UploadQueryHook{}

	AddUploadQueryHook(boil.AfterUpsertHook, uploadQueryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uploadQueryAfterUpsertHooks = []UploadQueryHook{}
}

func testUploadQueriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadQueriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(uploadQueryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadQueryToOneUploadUsingUpload(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UploadQuery
	var foreign Upload

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadQueryDBTypes, false, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UploadID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Upload().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UploadQuerySlice{&local}
	if err = local.L.LoadUpload(tx, false, (*[]*UploadQuery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Upload == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Upload = nil
	if err = local.L.LoadUpload(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Upload == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUploadQueryToOneSetOpUploadUsingUpload(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UploadQuery
	var b, c Upload

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadQueryDBTypes, false, strmangle.SetComplement(uploadQueryPrimaryKeyColumns, uploadQueryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Upload{&b, &c} {
		err = a.SetUpload(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Upload != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UploadQuery != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UploadID != x.ID {
			t.Error("foreign key was wrong value", a.UploadID)
		}

		if exists, err := UploadQueryExists(tx, a.UploadID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUploadQueriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUploadQueriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadQuerySlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUploadQueriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadQueries().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uploadQueryDBTypes = map[string]string{`UploadID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Query`: `jsonb`, `Response`: `jsonb`, `Error`: `text`}
	_                  = bytes.MinRead
)

func testUploadQueriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uploadQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uploadQueryAllColumns) == len(uploadQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUploadQueriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uploadQueryAllColumns) == len(uploadQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadQuery{}
	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadQueryDBTypes, true, uploadQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uploadQueryAllColumns, uploadQueryPrimaryKeyColumns) {
		fields = uploadQueryAllColumns
	} else {
		fields = strmangle.SetComplement(
			uploadQueryAllColumns,
			uploadQueryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UploadQuerySlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUploadQueriesUpsert(t *testing.T) {
	t.Parallel()

	if len(uploadQueryAllColumns) == len(uploadQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UploadQuery{}
	if err = randomize.Struct(seed, &o, uploadQueryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadQuery: %s", err)
	}

	count, err := UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uploadQueryDBTypes, false, uploadQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadQuery struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadQuery: %s", err)
	}

	count, err = UploadQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
