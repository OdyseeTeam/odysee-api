// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ForkliftUpload is an object representing the database table.
type ForkliftUpload struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      null.Int  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AsynqueryID null.Int  `boil:"asynquery_id" json:"asynquery_id,omitempty" toml:"asynquery_id" yaml:"asynquery_id,omitempty"`
	Path        string    `boil:"path" json:"path" toml:"path" yaml:"path"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error       string    `boil:"error" json:"error" toml:"error" yaml:"error"`
	Size        int64     `boil:"size" json:"size" toml:"size" yaml:"size"`
	Received    int64     `boil:"received" json:"received" toml:"received" yaml:"received"`

	R *forkliftUploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L forkliftUploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ForkliftUploadColumns = struct {
	ID          string
	UserID      string
	AsynqueryID string
	Path        string
	CreatedAt   string
	UpdatedAt   string
	Status      string
	Error       string
	Size        string
	Received    string
}{
	ID:          "id",
	UserID:      "user_id",
	AsynqueryID: "asynquery_id",
	Path:        "path",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Status:      "status",
	Error:       "error",
	Size:        "size",
	Received:    "received",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ForkliftUploadWhere = struct {
	ID          whereHelperstring
	UserID      whereHelpernull_Int
	AsynqueryID whereHelpernull_Int
	Path        whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	Status      whereHelperstring
	Error       whereHelperstring
	Size        whereHelperint64
	Received    whereHelperint64
}{
	ID:          whereHelperstring{field: "\"forklift_uploads\".\"id\""},
	UserID:      whereHelpernull_Int{field: "\"forklift_uploads\".\"user_id\""},
	AsynqueryID: whereHelpernull_Int{field: "\"forklift_uploads\".\"asynquery_id\""},
	Path:        whereHelperstring{field: "\"forklift_uploads\".\"path\""},
	CreatedAt:   whereHelpertime_Time{field: "\"forklift_uploads\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"forklift_uploads\".\"updated_at\""},
	Status:      whereHelperstring{field: "\"forklift_uploads\".\"status\""},
	Error:       whereHelperstring{field: "\"forklift_uploads\".\"error\""},
	Size:        whereHelperint64{field: "\"forklift_uploads\".\"size\""},
	Received:    whereHelperint64{field: "\"forklift_uploads\".\"received\""},
}

// ForkliftUploadRels is where relationship names are stored.
var ForkliftUploadRels = struct {
	Asynquery string
	User      string
}{
	Asynquery: "Asynquery",
	User:      "User",
}

// forkliftUploadR is where relationships are stored.
type forkliftUploadR struct {
	Asynquery *Asynquery
	User      *User
}

// NewStruct creates a new relationship struct
func (*forkliftUploadR) NewStruct() *forkliftUploadR {
	return &forkliftUploadR{}
}

// forkliftUploadL is where Load methods for each relationship are stored.
type forkliftUploadL struct{}

var (
	forkliftUploadAllColumns            = []string{"id", "user_id", "asynquery_id", "path", "created_at", "updated_at", "status", "error", "size", "received"}
	forkliftUploadColumnsWithoutDefault = []string{"id", "user_id", "asynquery_id", "path", "updated_at", "status", "error", "size"}
	forkliftUploadColumnsWithDefault    = []string{"created_at", "received"}
	forkliftUploadPrimaryKeyColumns     = []string{"id"}
)

type (
	// ForkliftUploadSlice is an alias for a slice of pointers to ForkliftUpload.
	// This should generally be used opposed to []ForkliftUpload.
	ForkliftUploadSlice []*ForkliftUpload
	// ForkliftUploadHook is the signature for custom ForkliftUpload hook methods
	ForkliftUploadHook func(boil.Executor, *ForkliftUpload) error

	forkliftUploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	forkliftUploadType                 = reflect.TypeOf(&ForkliftUpload{})
	forkliftUploadMapping              = queries.MakeStructMapping(forkliftUploadType)
	forkliftUploadPrimaryKeyMapping, _ = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, forkliftUploadPrimaryKeyColumns)
	forkliftUploadInsertCacheMut       sync.RWMutex
	forkliftUploadInsertCache          = make(map[string]insertCache)
	forkliftUploadUpdateCacheMut       sync.RWMutex
	forkliftUploadUpdateCache          = make(map[string]updateCache)
	forkliftUploadUpsertCacheMut       sync.RWMutex
	forkliftUploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var forkliftUploadBeforeInsertHooks []ForkliftUploadHook
var forkliftUploadBeforeUpdateHooks []ForkliftUploadHook
var forkliftUploadBeforeDeleteHooks []ForkliftUploadHook
var forkliftUploadBeforeUpsertHooks []ForkliftUploadHook

var forkliftUploadAfterInsertHooks []ForkliftUploadHook
var forkliftUploadAfterSelectHooks []ForkliftUploadHook
var forkliftUploadAfterUpdateHooks []ForkliftUploadHook
var forkliftUploadAfterDeleteHooks []ForkliftUploadHook
var forkliftUploadAfterUpsertHooks []ForkliftUploadHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ForkliftUpload) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ForkliftUpload) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ForkliftUpload) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ForkliftUpload) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ForkliftUpload) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ForkliftUpload) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ForkliftUpload) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ForkliftUpload) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ForkliftUpload) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range forkliftUploadAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForkliftUploadHook registers your hook function for all future operations.
func AddForkliftUploadHook(hookPoint boil.HookPoint, forkliftUploadHook ForkliftUploadHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		forkliftUploadBeforeInsertHooks = append(forkliftUploadBeforeInsertHooks, forkliftUploadHook)
	case boil.BeforeUpdateHook:
		forkliftUploadBeforeUpdateHooks = append(forkliftUploadBeforeUpdateHooks, forkliftUploadHook)
	case boil.BeforeDeleteHook:
		forkliftUploadBeforeDeleteHooks = append(forkliftUploadBeforeDeleteHooks, forkliftUploadHook)
	case boil.BeforeUpsertHook:
		forkliftUploadBeforeUpsertHooks = append(forkliftUploadBeforeUpsertHooks, forkliftUploadHook)
	case boil.AfterInsertHook:
		forkliftUploadAfterInsertHooks = append(forkliftUploadAfterInsertHooks, forkliftUploadHook)
	case boil.AfterSelectHook:
		forkliftUploadAfterSelectHooks = append(forkliftUploadAfterSelectHooks, forkliftUploadHook)
	case boil.AfterUpdateHook:
		forkliftUploadAfterUpdateHooks = append(forkliftUploadAfterUpdateHooks, forkliftUploadHook)
	case boil.AfterDeleteHook:
		forkliftUploadAfterDeleteHooks = append(forkliftUploadAfterDeleteHooks, forkliftUploadHook)
	case boil.AfterUpsertHook:
		forkliftUploadAfterUpsertHooks = append(forkliftUploadAfterUpsertHooks, forkliftUploadHook)
	}
}

// OneG returns a single forkliftUpload record from the query using the global executor.
func (q forkliftUploadQuery) OneG() (*ForkliftUpload, error) {
	return q.One(boil.GetDB())
}

// One returns a single forkliftUpload record from the query.
func (q forkliftUploadQuery) One(exec boil.Executor) (*ForkliftUpload, error) {
	o := &ForkliftUpload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for forklift_uploads")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ForkliftUpload records from the query using the global executor.
func (q forkliftUploadQuery) AllG() (ForkliftUploadSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ForkliftUpload records from the query.
func (q forkliftUploadQuery) All(exec boil.Executor) (ForkliftUploadSlice, error) {
	var o []*ForkliftUpload

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ForkliftUpload slice")
	}

	if len(forkliftUploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ForkliftUpload records in the query, and panics on error.
func (q forkliftUploadQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ForkliftUpload records in the query.
func (q forkliftUploadQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count forklift_uploads rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q forkliftUploadQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q forkliftUploadQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if forklift_uploads exists")
	}

	return count > 0, nil
}

// Asynquery pointed to by the foreign key.
func (o *ForkliftUpload) Asynquery(mods ...qm.QueryMod) asynqueryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AsynqueryID),
	}

	queryMods = append(queryMods, mods...)

	query := Asynqueries(queryMods...)
	queries.SetFrom(query.Query, "\"asynqueries\"")

	return query
}

// User pointed to by the foreign key.
func (o *ForkliftUpload) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadAsynquery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forkliftUploadL) LoadAsynquery(e boil.Executor, singular bool, maybeForkliftUpload interface{}, mods queries.Applicator) error {
	var slice []*ForkliftUpload
	var object *ForkliftUpload

	if singular {
		object = maybeForkliftUpload.(*ForkliftUpload)
	} else {
		slice = *maybeForkliftUpload.(*[]*ForkliftUpload)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forkliftUploadR{}
		}
		if !queries.IsNil(object.AsynqueryID) {
			args = append(args, object.AsynqueryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forkliftUploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AsynqueryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AsynqueryID) {
				args = append(args, obj.AsynqueryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`asynqueries`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asynquery")
	}

	var resultSlice []*Asynquery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asynquery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for asynqueries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asynqueries")
	}

	if len(forkliftUploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Asynquery = foreign
		if foreign.R == nil {
			foreign.R = &asynqueryR{}
		}
		foreign.R.ForkliftUploads = append(foreign.R.ForkliftUploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AsynqueryID, foreign.ID) {
				local.R.Asynquery = foreign
				if foreign.R == nil {
					foreign.R = &asynqueryR{}
				}
				foreign.R.ForkliftUploads = append(foreign.R.ForkliftUploads, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forkliftUploadL) LoadUser(e boil.Executor, singular bool, maybeForkliftUpload interface{}, mods queries.Applicator) error {
	var slice []*ForkliftUpload
	var object *ForkliftUpload

	if singular {
		object = maybeForkliftUpload.(*ForkliftUpload)
	} else {
		slice = *maybeForkliftUpload.(*[]*ForkliftUpload)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forkliftUploadR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forkliftUploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(forkliftUploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ForkliftUploads = append(foreign.R.ForkliftUploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ForkliftUploads = append(foreign.R.ForkliftUploads, local)
				break
			}
		}
	}

	return nil
}

// SetAsynqueryG of the forkliftUpload to the related item.
// Sets o.R.Asynquery to related.
// Adds o to related.R.ForkliftUploads.
// Uses the global database handle.
func (o *ForkliftUpload) SetAsynqueryG(insert bool, related *Asynquery) error {
	return o.SetAsynquery(boil.GetDB(), insert, related)
}

// SetAsynquery of the forkliftUpload to the related item.
// Sets o.R.Asynquery to related.
// Adds o to related.R.ForkliftUploads.
func (o *ForkliftUpload) SetAsynquery(exec boil.Executor, insert bool, related *Asynquery) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"forklift_uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asynquery_id"}),
		strmangle.WhereClause("\"", "\"", 2, forkliftUploadPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AsynqueryID, related.ID)
	if o.R == nil {
		o.R = &forkliftUploadR{
			Asynquery: related,
		}
	} else {
		o.R.Asynquery = related
	}

	if related.R == nil {
		related.R = &asynqueryR{
			ForkliftUploads: ForkliftUploadSlice{o},
		}
	} else {
		related.R.ForkliftUploads = append(related.R.ForkliftUploads, o)
	}

	return nil
}

// RemoveAsynqueryG relationship.
// Sets o.R.Asynquery to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ForkliftUpload) RemoveAsynqueryG(related *Asynquery) error {
	return o.RemoveAsynquery(boil.GetDB(), related)
}

// RemoveAsynquery relationship.
// Sets o.R.Asynquery to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ForkliftUpload) RemoveAsynquery(exec boil.Executor, related *Asynquery) error {
	var err error

	queries.SetScanner(&o.AsynqueryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("asynquery_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Asynquery = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ForkliftUploads {
		if queries.Equal(o.AsynqueryID, ri.AsynqueryID) {
			continue
		}

		ln := len(related.R.ForkliftUploads)
		if ln > 1 && i < ln-1 {
			related.R.ForkliftUploads[i] = related.R.ForkliftUploads[ln-1]
		}
		related.R.ForkliftUploads = related.R.ForkliftUploads[:ln-1]
		break
	}
	return nil
}

// SetUserG of the forkliftUpload to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ForkliftUploads.
// Uses the global database handle.
func (o *ForkliftUpload) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the forkliftUpload to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ForkliftUploads.
func (o *ForkliftUpload) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"forklift_uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, forkliftUploadPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &forkliftUploadR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ForkliftUploads: ForkliftUploadSlice{o},
		}
	} else {
		related.R.ForkliftUploads = append(related.R.ForkliftUploads, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ForkliftUpload) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ForkliftUpload) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ForkliftUploads {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.ForkliftUploads)
		if ln > 1 && i < ln-1 {
			related.R.ForkliftUploads[i] = related.R.ForkliftUploads[ln-1]
		}
		related.R.ForkliftUploads = related.R.ForkliftUploads[:ln-1]
		break
	}
	return nil
}

// ForkliftUploads retrieves all the records using an executor.
func ForkliftUploads(mods ...qm.QueryMod) forkliftUploadQuery {
	mods = append(mods, qm.From("\"forklift_uploads\""))
	return forkliftUploadQuery{NewQuery(mods...)}
}

// FindForkliftUploadG retrieves a single record by ID.
func FindForkliftUploadG(iD string, selectCols ...string) (*ForkliftUpload, error) {
	return FindForkliftUpload(boil.GetDB(), iD, selectCols...)
}

// FindForkliftUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForkliftUpload(exec boil.Executor, iD string, selectCols ...string) (*ForkliftUpload, error) {
	forkliftUploadObj := &ForkliftUpload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"forklift_uploads\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, forkliftUploadObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from forklift_uploads")
	}

	return forkliftUploadObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ForkliftUpload) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ForkliftUpload) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no forklift_uploads provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forkliftUploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	forkliftUploadInsertCacheMut.RLock()
	cache, cached := forkliftUploadInsertCache[key]
	forkliftUploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			forkliftUploadAllColumns,
			forkliftUploadColumnsWithDefault,
			forkliftUploadColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"forklift_uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"forklift_uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into forklift_uploads")
	}

	if !cached {
		forkliftUploadInsertCacheMut.Lock()
		forkliftUploadInsertCache[key] = cache
		forkliftUploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ForkliftUpload record using the global executor.
// See Update for more documentation.
func (o *ForkliftUpload) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ForkliftUpload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ForkliftUpload) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	forkliftUploadUpdateCacheMut.RLock()
	cache, cached := forkliftUploadUpdateCache[key]
	forkliftUploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			forkliftUploadAllColumns,
			forkliftUploadPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update forklift_uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"forklift_uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, forkliftUploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, append(wl, forkliftUploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update forklift_uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for forklift_uploads")
	}

	if !cached {
		forkliftUploadUpdateCacheMut.Lock()
		forkliftUploadUpdateCache[key] = cache
		forkliftUploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q forkliftUploadQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q forkliftUploadQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for forklift_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for forklift_uploads")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ForkliftUploadSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ForkliftUploadSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forkliftUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"forklift_uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, forkliftUploadPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in forkliftUpload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all forkliftUpload")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ForkliftUpload) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ForkliftUpload) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no forklift_uploads provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forkliftUploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	forkliftUploadUpsertCacheMut.RLock()
	cache, cached := forkliftUploadUpsertCache[key]
	forkliftUploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			forkliftUploadAllColumns,
			forkliftUploadColumnsWithDefault,
			forkliftUploadColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			forkliftUploadAllColumns,
			forkliftUploadPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert forklift_uploads, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(forkliftUploadPrimaryKeyColumns))
			copy(conflict, forkliftUploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"forklift_uploads\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(forkliftUploadType, forkliftUploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert forklift_uploads")
	}

	if !cached {
		forkliftUploadUpsertCacheMut.Lock()
		forkliftUploadUpsertCache[key] = cache
		forkliftUploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ForkliftUpload record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ForkliftUpload) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ForkliftUpload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ForkliftUpload) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ForkliftUpload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), forkliftUploadPrimaryKeyMapping)
	sql := "DELETE FROM \"forklift_uploads\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from forklift_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for forklift_uploads")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q forkliftUploadQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no forkliftUploadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forklift_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forklift_uploads")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ForkliftUploadSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ForkliftUploadSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(forkliftUploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forkliftUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"forklift_uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, forkliftUploadPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forkliftUpload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forklift_uploads")
	}

	if len(forkliftUploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ForkliftUpload) ReloadG() error {
	if o == nil {
		return errors.New("models: no ForkliftUpload provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ForkliftUpload) Reload(exec boil.Executor) error {
	ret, err := FindForkliftUpload(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForkliftUploadSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ForkliftUploadSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForkliftUploadSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ForkliftUploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forkliftUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"forklift_uploads\".* FROM \"forklift_uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, forkliftUploadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ForkliftUploadSlice")
	}

	*o = slice

	return nil
}

// ForkliftUploadExistsG checks if the ForkliftUpload row exists.
func ForkliftUploadExistsG(iD string) (bool, error) {
	return ForkliftUploadExists(boil.GetDB(), iD)
}

// ForkliftUploadExists checks if the ForkliftUpload row exists.
func ForkliftUploadExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"forklift_uploads\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if forklift_uploads exists")
	}

	return exists, nil
}
