// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PublishQuery is an object representing the database table.
type PublishQuery struct {
	UploadID  string    `boil:"upload_id" json:"upload_id" toml:"upload_id" yaml:"upload_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error     string    `boil:"error" json:"error" toml:"error" yaml:"error"`
	Query     null.JSON `boil:"query" json:"query,omitempty" toml:"query" yaml:"query,omitempty"`
	Response  null.JSON `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`

	R *publishQueryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publishQueryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublishQueryColumns = struct {
	UploadID  string
	CreatedAt string
	UpdatedAt string
	Status    string
	Error     string
	Query     string
	Response  string
}{
	UploadID:  "upload_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Status:    "status",
	Error:     "error",
	Query:     "query",
	Response:  "response",
}

// Generated where

var PublishQueryWhere = struct {
	UploadID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Status    whereHelperstring
	Error     whereHelperstring
	Query     whereHelpernull_JSON
	Response  whereHelpernull_JSON
}{
	UploadID:  whereHelperstring{field: "\"publish_queries\".\"upload_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"publish_queries\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"publish_queries\".\"updated_at\""},
	Status:    whereHelperstring{field: "\"publish_queries\".\"status\""},
	Error:     whereHelperstring{field: "\"publish_queries\".\"error\""},
	Query:     whereHelpernull_JSON{field: "\"publish_queries\".\"query\""},
	Response:  whereHelpernull_JSON{field: "\"publish_queries\".\"response\""},
}

// PublishQueryRels is where relationship names are stored.
var PublishQueryRels = struct {
	Upload string
}{
	Upload: "Upload",
}

// publishQueryR is where relationships are stored.
type publishQueryR struct {
	Upload *Upload
}

// NewStruct creates a new relationship struct
func (*publishQueryR) NewStruct() *publishQueryR {
	return &publishQueryR{}
}

// publishQueryL is where Load methods for each relationship are stored.
type publishQueryL struct{}

var (
	publishQueryAllColumns            = []string{"upload_id", "created_at", "updated_at", "status", "error", "query", "response"}
	publishQueryColumnsWithoutDefault = []string{"upload_id", "updated_at", "status", "error", "query", "response"}
	publishQueryColumnsWithDefault    = []string{"created_at"}
	publishQueryPrimaryKeyColumns     = []string{"upload_id"}
)

type (
	// PublishQuerySlice is an alias for a slice of pointers to PublishQuery.
	// This should generally be used opposed to []PublishQuery.
	PublishQuerySlice []*PublishQuery
	// PublishQueryHook is the signature for custom PublishQuery hook methods
	PublishQueryHook func(boil.Executor, *PublishQuery) error

	publishQueryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publishQueryType                 = reflect.TypeOf(&PublishQuery{})
	publishQueryMapping              = queries.MakeStructMapping(publishQueryType)
	publishQueryPrimaryKeyMapping, _ = queries.BindMapping(publishQueryType, publishQueryMapping, publishQueryPrimaryKeyColumns)
	publishQueryInsertCacheMut       sync.RWMutex
	publishQueryInsertCache          = make(map[string]insertCache)
	publishQueryUpdateCacheMut       sync.RWMutex
	publishQueryUpdateCache          = make(map[string]updateCache)
	publishQueryUpsertCacheMut       sync.RWMutex
	publishQueryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publishQueryBeforeInsertHooks []PublishQueryHook
var publishQueryBeforeUpdateHooks []PublishQueryHook
var publishQueryBeforeDeleteHooks []PublishQueryHook
var publishQueryBeforeUpsertHooks []PublishQueryHook

var publishQueryAfterInsertHooks []PublishQueryHook
var publishQueryAfterSelectHooks []PublishQueryHook
var publishQueryAfterUpdateHooks []PublishQueryHook
var publishQueryAfterDeleteHooks []PublishQueryHook
var publishQueryAfterUpsertHooks []PublishQueryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublishQuery) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublishQuery) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublishQuery) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublishQuery) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublishQuery) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublishQuery) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublishQuery) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublishQuery) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublishQuery) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range publishQueryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublishQueryHook registers your hook function for all future operations.
func AddPublishQueryHook(hookPoint boil.HookPoint, publishQueryHook PublishQueryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publishQueryBeforeInsertHooks = append(publishQueryBeforeInsertHooks, publishQueryHook)
	case boil.BeforeUpdateHook:
		publishQueryBeforeUpdateHooks = append(publishQueryBeforeUpdateHooks, publishQueryHook)
	case boil.BeforeDeleteHook:
		publishQueryBeforeDeleteHooks = append(publishQueryBeforeDeleteHooks, publishQueryHook)
	case boil.BeforeUpsertHook:
		publishQueryBeforeUpsertHooks = append(publishQueryBeforeUpsertHooks, publishQueryHook)
	case boil.AfterInsertHook:
		publishQueryAfterInsertHooks = append(publishQueryAfterInsertHooks, publishQueryHook)
	case boil.AfterSelectHook:
		publishQueryAfterSelectHooks = append(publishQueryAfterSelectHooks, publishQueryHook)
	case boil.AfterUpdateHook:
		publishQueryAfterUpdateHooks = append(publishQueryAfterUpdateHooks, publishQueryHook)
	case boil.AfterDeleteHook:
		publishQueryAfterDeleteHooks = append(publishQueryAfterDeleteHooks, publishQueryHook)
	case boil.AfterUpsertHook:
		publishQueryAfterUpsertHooks = append(publishQueryAfterUpsertHooks, publishQueryHook)
	}
}

// OneG returns a single publishQuery record from the query using the global executor.
func (q publishQueryQuery) OneG() (*PublishQuery, error) {
	return q.One(boil.GetDB())
}

// One returns a single publishQuery record from the query.
func (q publishQueryQuery) One(exec boil.Executor) (*PublishQuery, error) {
	o := &PublishQuery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publish_queries")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PublishQuery records from the query using the global executor.
func (q publishQueryQuery) AllG() (PublishQuerySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all PublishQuery records from the query.
func (q publishQueryQuery) All(exec boil.Executor) (PublishQuerySlice, error) {
	var o []*PublishQuery

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublishQuery slice")
	}

	if len(publishQueryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PublishQuery records in the query, and panics on error.
func (q publishQueryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all PublishQuery records in the query.
func (q publishQueryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publish_queries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q publishQueryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q publishQueryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publish_queries exists")
	}

	return count > 0, nil
}

// Upload pointed to by the foreign key.
func (o *PublishQuery) Upload(mods ...qm.QueryMod) uploadQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UploadID),
	}

	queryMods = append(queryMods, mods...)

	query := Uploads(queryMods...)
	queries.SetFrom(query.Query, "\"uploads\"")

	return query
}

// LoadUpload allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publishQueryL) LoadUpload(e boil.Executor, singular bool, maybePublishQuery interface{}, mods queries.Applicator) error {
	var slice []*PublishQuery
	var object *PublishQuery

	if singular {
		object = maybePublishQuery.(*PublishQuery)
	} else {
		slice = *maybePublishQuery.(*[]*PublishQuery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publishQueryR{}
		}
		args = append(args, object.UploadID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publishQueryR{}
			}

			for _, a := range args {
				if a == obj.UploadID {
					continue Outer
				}
			}

			args = append(args, obj.UploadID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`uploads`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Upload")
	}

	var resultSlice []*Upload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Upload")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for uploads")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uploads")
	}

	if len(publishQueryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Upload = foreign
		if foreign.R == nil {
			foreign.R = &uploadR{}
		}
		foreign.R.PublishQuery = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UploadID == foreign.ID {
				local.R.Upload = foreign
				if foreign.R == nil {
					foreign.R = &uploadR{}
				}
				foreign.R.PublishQuery = local
				break
			}
		}
	}

	return nil
}

// SetUploadG of the publishQuery to the related item.
// Sets o.R.Upload to related.
// Adds o to related.R.PublishQuery.
// Uses the global database handle.
func (o *PublishQuery) SetUploadG(insert bool, related *Upload) error {
	return o.SetUpload(boil.GetDB(), insert, related)
}

// SetUpload of the publishQuery to the related item.
// Sets o.R.Upload to related.
// Adds o to related.R.PublishQuery.
func (o *PublishQuery) SetUpload(exec boil.Executor, insert bool, related *Upload) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"publish_queries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
		strmangle.WhereClause("\"", "\"", 2, publishQueryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UploadID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UploadID = related.ID
	if o.R == nil {
		o.R = &publishQueryR{
			Upload: related,
		}
	} else {
		o.R.Upload = related
	}

	if related.R == nil {
		related.R = &uploadR{
			PublishQuery: o,
		}
	} else {
		related.R.PublishQuery = o
	}

	return nil
}

// PublishQueries retrieves all the records using an executor.
func PublishQueries(mods ...qm.QueryMod) publishQueryQuery {
	mods = append(mods, qm.From("\"publish_queries\""))
	return publishQueryQuery{NewQuery(mods...)}
}

// FindPublishQueryG retrieves a single record by ID.
func FindPublishQueryG(uploadID string, selectCols ...string) (*PublishQuery, error) {
	return FindPublishQuery(boil.GetDB(), uploadID, selectCols...)
}

// FindPublishQuery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublishQuery(exec boil.Executor, uploadID string, selectCols ...string) (*PublishQuery, error) {
	publishQueryObj := &PublishQuery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publish_queries\" where \"upload_id\"=$1", sel,
	)

	q := queries.Raw(query, uploadID)

	err := q.Bind(nil, exec, publishQueryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publish_queries")
	}

	return publishQueryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PublishQuery) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublishQuery) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publish_queries provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publishQueryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publishQueryInsertCacheMut.RLock()
	cache, cached := publishQueryInsertCache[key]
	publishQueryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publishQueryAllColumns,
			publishQueryColumnsWithDefault,
			publishQueryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publishQueryType, publishQueryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publishQueryType, publishQueryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publish_queries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publish_queries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publish_queries")
	}

	if !cached {
		publishQueryInsertCacheMut.Lock()
		publishQueryInsertCache[key] = cache
		publishQueryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single PublishQuery record using the global executor.
// See Update for more documentation.
func (o *PublishQuery) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the PublishQuery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublishQuery) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publishQueryUpdateCacheMut.RLock()
	cache, cached := publishQueryUpdateCache[key]
	publishQueryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publishQueryAllColumns,
			publishQueryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publish_queries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publish_queries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publishQueryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publishQueryType, publishQueryMapping, append(wl, publishQueryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publish_queries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publish_queries")
	}

	if !cached {
		publishQueryUpdateCacheMut.Lock()
		publishQueryUpdateCache[key] = cache
		publishQueryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q publishQueryQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q publishQueryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publish_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publish_queries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PublishQuerySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublishQuerySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publishQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publish_queries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publishQueryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publishQuery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publishQuery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PublishQuery) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublishQuery) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publish_queries provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publishQueryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publishQueryUpsertCacheMut.RLock()
	cache, cached := publishQueryUpsertCache[key]
	publishQueryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publishQueryAllColumns,
			publishQueryColumnsWithDefault,
			publishQueryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publishQueryAllColumns,
			publishQueryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publish_queries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publishQueryPrimaryKeyColumns))
			copy(conflict, publishQueryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publish_queries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publishQueryType, publishQueryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publishQueryType, publishQueryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publish_queries")
	}

	if !cached {
		publishQueryUpsertCacheMut.Lock()
		publishQueryUpsertCache[key] = cache
		publishQueryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single PublishQuery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PublishQuery) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single PublishQuery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublishQuery) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublishQuery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publishQueryPrimaryKeyMapping)
	sql := "DELETE FROM \"publish_queries\" WHERE \"upload_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publish_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publish_queries")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publishQueryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publishQueryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publish_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publish_queries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PublishQuerySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublishQuerySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publishQueryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publishQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publish_queries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publishQueryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publishQuery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publish_queries")
	}

	if len(publishQueryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PublishQuery) ReloadG() error {
	if o == nil {
		return errors.New("models: no PublishQuery provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublishQuery) Reload(exec boil.Executor) error {
	ret, err := FindPublishQuery(exec, o.UploadID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublishQuerySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PublishQuerySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublishQuerySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublishQuerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publishQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publish_queries\".* FROM \"publish_queries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publishQueryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublishQuerySlice")
	}

	*o = slice

	return nil
}

// PublishQueryExistsG checks if the PublishQuery row exists.
func PublishQueryExistsG(uploadID string) (bool, error) {
	return PublishQueryExists(boil.GetDB(), uploadID)
}

// PublishQueryExists checks if the PublishQuery row exists.
func PublishQueryExists(exec boil.Executor, uploadID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publish_queries\" where \"upload_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, uploadID)
	}

	row := exec.QueryRow(sql, uploadID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publish_queries exists")
	}

	return exists, nil
}
