// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Upload is an object representing the database table.
type Upload struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.Int  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Path      string    `boil:"path" json:"path" toml:"path" yaml:"path"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error     string    `boil:"error" json:"error" toml:"error" yaml:"error"`
	Size      int64     `boil:"size" json:"size" toml:"size" yaml:"size"`
	Received  int64     `boil:"received" json:"received" toml:"received" yaml:"received"`

	R *uploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadColumns = struct {
	ID        string
	UserID    string
	Path      string
	CreatedAt string
	UpdatedAt string
	Status    string
	Error     string
	Size      string
	Received  string
}{
	ID:        "id",
	UserID:    "user_id",
	Path:      "path",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Status:    "status",
	Error:     "error",
	Size:      "size",
	Received:  "received",
}

// Generated where

var UploadWhere = struct {
	ID        whereHelperstring
	UserID    whereHelpernull_Int
	Path      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Status    whereHelperstring
	Error     whereHelperstring
	Size      whereHelperint64
	Received  whereHelperint64
}{
	ID:        whereHelperstring{field: "\"uploads\".\"id\""},
	UserID:    whereHelpernull_Int{field: "\"uploads\".\"user_id\""},
	Path:      whereHelperstring{field: "\"uploads\".\"path\""},
	CreatedAt: whereHelpertime_Time{field: "\"uploads\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"uploads\".\"updated_at\""},
	Status:    whereHelperstring{field: "\"uploads\".\"status\""},
	Error:     whereHelperstring{field: "\"uploads\".\"error\""},
	Size:      whereHelperint64{field: "\"uploads\".\"size\""},
	Received:  whereHelperint64{field: "\"uploads\".\"received\""},
}

// UploadRels is where relationship names are stored.
var UploadRels = struct {
	User         string
	PublishQuery string
}{
	User:         "User",
	PublishQuery: "PublishQuery",
}

// uploadR is where relationships are stored.
type uploadR struct {
	User         *User
	PublishQuery *PublishQuery
}

// NewStruct creates a new relationship struct
func (*uploadR) NewStruct() *uploadR {
	return &uploadR{}
}

// uploadL is where Load methods for each relationship are stored.
type uploadL struct{}

var (
	uploadAllColumns            = []string{"id", "user_id", "path", "created_at", "updated_at", "status", "error", "size", "received"}
	uploadColumnsWithoutDefault = []string{"id", "user_id", "path", "updated_at", "status", "error", "size"}
	uploadColumnsWithDefault    = []string{"created_at", "received"}
	uploadPrimaryKeyColumns     = []string{"id"}
)

type (
	// UploadSlice is an alias for a slice of pointers to Upload.
	// This should generally be used opposed to []Upload.
	UploadSlice []*Upload
	// UploadHook is the signature for custom Upload hook methods
	UploadHook func(boil.Executor, *Upload) error

	uploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadType                 = reflect.TypeOf(&Upload{})
	uploadMapping              = queries.MakeStructMapping(uploadType)
	uploadPrimaryKeyMapping, _ = queries.BindMapping(uploadType, uploadMapping, uploadPrimaryKeyColumns)
	uploadInsertCacheMut       sync.RWMutex
	uploadInsertCache          = make(map[string]insertCache)
	uploadUpdateCacheMut       sync.RWMutex
	uploadUpdateCache          = make(map[string]updateCache)
	uploadUpsertCacheMut       sync.RWMutex
	uploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadBeforeInsertHooks []UploadHook
var uploadBeforeUpdateHooks []UploadHook
var uploadBeforeDeleteHooks []UploadHook
var uploadBeforeUpsertHooks []UploadHook

var uploadAfterInsertHooks []UploadHook
var uploadAfterSelectHooks []UploadHook
var uploadAfterUpdateHooks []UploadHook
var uploadAfterDeleteHooks []UploadHook
var uploadAfterUpsertHooks []UploadHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upload) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upload) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upload) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upload) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upload) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upload) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upload) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upload) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upload) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadHook registers your hook function for all future operations.
func AddUploadHook(hookPoint boil.HookPoint, uploadHook UploadHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		uploadBeforeInsertHooks = append(uploadBeforeInsertHooks, uploadHook)
	case boil.BeforeUpdateHook:
		uploadBeforeUpdateHooks = append(uploadBeforeUpdateHooks, uploadHook)
	case boil.BeforeDeleteHook:
		uploadBeforeDeleteHooks = append(uploadBeforeDeleteHooks, uploadHook)
	case boil.BeforeUpsertHook:
		uploadBeforeUpsertHooks = append(uploadBeforeUpsertHooks, uploadHook)
	case boil.AfterInsertHook:
		uploadAfterInsertHooks = append(uploadAfterInsertHooks, uploadHook)
	case boil.AfterSelectHook:
		uploadAfterSelectHooks = append(uploadAfterSelectHooks, uploadHook)
	case boil.AfterUpdateHook:
		uploadAfterUpdateHooks = append(uploadAfterUpdateHooks, uploadHook)
	case boil.AfterDeleteHook:
		uploadAfterDeleteHooks = append(uploadAfterDeleteHooks, uploadHook)
	case boil.AfterUpsertHook:
		uploadAfterUpsertHooks = append(uploadAfterUpsertHooks, uploadHook)
	}
}

// OneG returns a single upload record from the query using the global executor.
func (q uploadQuery) OneG() (*Upload, error) {
	return q.One(boil.GetDB())
}

// One returns a single upload record from the query.
func (q uploadQuery) One(exec boil.Executor) (*Upload, error) {
	o := &Upload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for uploads")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Upload records from the query using the global executor.
func (q uploadQuery) AllG() (UploadSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Upload records from the query.
func (q uploadQuery) All(exec boil.Executor) (UploadSlice, error) {
	var o []*Upload

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Upload slice")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Upload records in the query, and panics on error.
func (q uploadQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Upload records in the query.
func (q uploadQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count uploads rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q uploadQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q uploadQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if uploads exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Upload) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// PublishQuery pointed to by the foreign key.
func (o *Upload) PublishQuery(mods ...qm.QueryMod) publishQueryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("upload_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := PublishQueries(queryMods...)
	queries.SetFrom(query.Query, "\"publish_queries\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadL) LoadUser(e boil.Executor, singular bool, maybeUpload interface{}, mods queries.Applicator) error {
	var slice []*Upload
	var object *Upload

	if singular {
		object = maybeUpload.(*Upload)
	} else {
		slice = *maybeUpload.(*[]*Upload)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uploadR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Uploads = append(foreign.R.Uploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Uploads = append(foreign.R.Uploads, local)
				break
			}
		}
	}

	return nil
}

// LoadPublishQuery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (uploadL) LoadPublishQuery(e boil.Executor, singular bool, maybeUpload interface{}, mods queries.Applicator) error {
	var slice []*Upload
	var object *Upload

	if singular {
		object = maybeUpload.(*Upload)
	} else {
		slice = *maybeUpload.(*[]*Upload)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uploadR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`publish_queries`), qm.WhereIn(`upload_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PublishQuery")
	}

	var resultSlice []*PublishQuery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PublishQuery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publish_queries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publish_queries")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PublishQuery = foreign
		if foreign.R == nil {
			foreign.R = &publishQueryR{}
		}
		foreign.R.Upload = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UploadID {
				local.R.PublishQuery = foreign
				if foreign.R == nil {
					foreign.R = &publishQueryR{}
				}
				foreign.R.Upload = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the upload to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Uploads.
// Uses the global database handle.
func (o *Upload) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the upload to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Uploads.
func (o *Upload) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &uploadR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Uploads: UploadSlice{o},
		}
	} else {
		related.R.Uploads = append(related.R.Uploads, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Upload) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Upload) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Uploads {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Uploads)
		if ln > 1 && i < ln-1 {
			related.R.Uploads[i] = related.R.Uploads[ln-1]
		}
		related.R.Uploads = related.R.Uploads[:ln-1]
		break
	}
	return nil
}

// SetPublishQueryG of the upload to the related item.
// Sets o.R.PublishQuery to related.
// Adds o to related.R.Upload.
// Uses the global database handle.
func (o *Upload) SetPublishQueryG(insert bool, related *PublishQuery) error {
	return o.SetPublishQuery(boil.GetDB(), insert, related)
}

// SetPublishQuery of the upload to the related item.
// Sets o.R.PublishQuery to related.
// Adds o to related.R.Upload.
func (o *Upload) SetPublishQuery(exec boil.Executor, insert bool, related *PublishQuery) error {
	var err error

	if insert {
		related.UploadID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"publish_queries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
			strmangle.WhereClause("\"", "\"", 2, publishQueryPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UploadID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UploadID = o.ID

	}

	if o.R == nil {
		o.R = &uploadR{
			PublishQuery: related,
		}
	} else {
		o.R.PublishQuery = related
	}

	if related.R == nil {
		related.R = &publishQueryR{
			Upload: o,
		}
	} else {
		related.R.Upload = o
	}
	return nil
}

// Uploads retrieves all the records using an executor.
func Uploads(mods ...qm.QueryMod) uploadQuery {
	mods = append(mods, qm.From("\"uploads\""))
	return uploadQuery{NewQuery(mods...)}
}

// FindUploadG retrieves a single record by ID.
func FindUploadG(iD string, selectCols ...string) (*Upload, error) {
	return FindUpload(boil.GetDB(), iD, selectCols...)
}

// FindUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpload(exec boil.Executor, iD string, selectCols ...string) (*Upload, error) {
	uploadObj := &Upload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uploads\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, uploadObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from uploads")
	}

	return uploadObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Upload) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upload) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uploads provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadInsertCacheMut.RLock()
	cache, cached := uploadInsertCache[key]
	uploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into uploads")
	}

	if !cached {
		uploadInsertCacheMut.Lock()
		uploadInsertCache[key] = cache
		uploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Upload record using the global executor.
// See Update for more documentation.
func (o *Upload) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Upload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upload) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadUpdateCacheMut.RLock()
	cache, cached := uploadUpdateCache[key]
	uploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, append(wl, uploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for uploads")
	}

	if !cached {
		uploadUpdateCacheMut.Lock()
		uploadUpdateCache[key] = cache
		uploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q uploadQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for uploads")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UploadSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all upload")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Upload) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upload) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uploads provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadUpsertCacheMut.RLock()
	cache, cached := uploadUpsertCache[key]
	uploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert uploads, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uploadPrimaryKeyColumns))
			copy(conflict, uploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"uploads\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert uploads")
	}

	if !cached {
		uploadUpsertCacheMut.Lock()
		uploadUpsertCache[key] = cache
		uploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Upload record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Upload) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Upload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upload) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Upload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadPrimaryKeyMapping)
	sql := "DELETE FROM \"uploads\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for uploads")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UploadSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	if len(uploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Upload) ReloadG() error {
	if o == nil {
		return errors.New("models: no Upload provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upload) Reload(exec boil.Executor) error {
	ret, err := FindUpload(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UploadSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uploads\".* FROM \"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadSlice")
	}

	*o = slice

	return nil
}

// UploadExistsG checks if the Upload row exists.
func UploadExistsG(iD string) (bool, error) {
	return UploadExists(boil.GetDB(), iD)
}

// UploadExists checks if the Upload row exists.
func UploadExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uploads\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if uploads exists")
	}

	return exists, nil
}
