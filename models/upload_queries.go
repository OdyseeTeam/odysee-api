// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UploadQuery is an object representing the database table.
type UploadQuery struct {
	UploadID  string    `boil:"upload_id" json:"upload_id" toml:"upload_id" yaml:"upload_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Query     null.JSON `boil:"query" json:"query,omitempty" toml:"query" yaml:"query,omitempty"`
	Response  null.JSON `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`
	Error     string    `boil:"error" json:"error" toml:"error" yaml:"error"`

	R *uploadQueryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadQueryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadQueryColumns = struct {
	UploadID  string
	CreatedAt string
	UpdatedAt string
	Query     string
	Response  string
	Error     string
}{
	UploadID:  "upload_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Query:     "query",
	Response:  "response",
	Error:     "error",
}

// Generated where

var UploadQueryWhere = struct {
	UploadID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Query     whereHelpernull_JSON
	Response  whereHelpernull_JSON
	Error     whereHelperstring
}{
	UploadID:  whereHelperstring{field: "\"upload_queries\".\"upload_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"upload_queries\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"upload_queries\".\"updated_at\""},
	Query:     whereHelpernull_JSON{field: "\"upload_queries\".\"query\""},
	Response:  whereHelpernull_JSON{field: "\"upload_queries\".\"response\""},
	Error:     whereHelperstring{field: "\"upload_queries\".\"error\""},
}

// UploadQueryRels is where relationship names are stored.
var UploadQueryRels = struct {
	Upload string
}{
	Upload: "Upload",
}

// uploadQueryR is where relationships are stored.
type uploadQueryR struct {
	Upload *Upload
}

// NewStruct creates a new relationship struct
func (*uploadQueryR) NewStruct() *uploadQueryR {
	return &uploadQueryR{}
}

// uploadQueryL is where Load methods for each relationship are stored.
type uploadQueryL struct{}

var (
	uploadQueryAllColumns            = []string{"upload_id", "created_at", "updated_at", "query", "response", "error"}
	uploadQueryColumnsWithoutDefault = []string{"upload_id", "updated_at", "query", "response", "error"}
	uploadQueryColumnsWithDefault    = []string{"created_at"}
	uploadQueryPrimaryKeyColumns     = []string{"upload_id"}
)

type (
	// UploadQuerySlice is an alias for a slice of pointers to UploadQuery.
	// This should generally be used opposed to []UploadQuery.
	UploadQuerySlice []*UploadQuery
	// UploadQueryHook is the signature for custom UploadQuery hook methods
	UploadQueryHook func(boil.Executor, *UploadQuery) error

	uploadQueryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadQueryType                 = reflect.TypeOf(&UploadQuery{})
	uploadQueryMapping              = queries.MakeStructMapping(uploadQueryType)
	uploadQueryPrimaryKeyMapping, _ = queries.BindMapping(uploadQueryType, uploadQueryMapping, uploadQueryPrimaryKeyColumns)
	uploadQueryInsertCacheMut       sync.RWMutex
	uploadQueryInsertCache          = make(map[string]insertCache)
	uploadQueryUpdateCacheMut       sync.RWMutex
	uploadQueryUpdateCache          = make(map[string]updateCache)
	uploadQueryUpsertCacheMut       sync.RWMutex
	uploadQueryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadQueryBeforeInsertHooks []UploadQueryHook
var uploadQueryBeforeUpdateHooks []UploadQueryHook
var uploadQueryBeforeDeleteHooks []UploadQueryHook
var uploadQueryBeforeUpsertHooks []UploadQueryHook

var uploadQueryAfterInsertHooks []UploadQueryHook
var uploadQueryAfterSelectHooks []UploadQueryHook
var uploadQueryAfterUpdateHooks []UploadQueryHook
var uploadQueryAfterDeleteHooks []UploadQueryHook
var uploadQueryAfterUpsertHooks []UploadQueryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UploadQuery) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UploadQuery) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UploadQuery) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UploadQuery) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UploadQuery) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UploadQuery) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UploadQuery) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UploadQuery) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UploadQuery) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range uploadQueryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadQueryHook registers your hook function for all future operations.
func AddUploadQueryHook(hookPoint boil.HookPoint, uploadQueryHook UploadQueryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		uploadQueryBeforeInsertHooks = append(uploadQueryBeforeInsertHooks, uploadQueryHook)
	case boil.BeforeUpdateHook:
		uploadQueryBeforeUpdateHooks = append(uploadQueryBeforeUpdateHooks, uploadQueryHook)
	case boil.BeforeDeleteHook:
		uploadQueryBeforeDeleteHooks = append(uploadQueryBeforeDeleteHooks, uploadQueryHook)
	case boil.BeforeUpsertHook:
		uploadQueryBeforeUpsertHooks = append(uploadQueryBeforeUpsertHooks, uploadQueryHook)
	case boil.AfterInsertHook:
		uploadQueryAfterInsertHooks = append(uploadQueryAfterInsertHooks, uploadQueryHook)
	case boil.AfterSelectHook:
		uploadQueryAfterSelectHooks = append(uploadQueryAfterSelectHooks, uploadQueryHook)
	case boil.AfterUpdateHook:
		uploadQueryAfterUpdateHooks = append(uploadQueryAfterUpdateHooks, uploadQueryHook)
	case boil.AfterDeleteHook:
		uploadQueryAfterDeleteHooks = append(uploadQueryAfterDeleteHooks, uploadQueryHook)
	case boil.AfterUpsertHook:
		uploadQueryAfterUpsertHooks = append(uploadQueryAfterUpsertHooks, uploadQueryHook)
	}
}

// OneG returns a single uploadQuery record from the query using the global executor.
func (q uploadQueryQuery) OneG() (*UploadQuery, error) {
	return q.One(boil.GetDB())
}

// One returns a single uploadQuery record from the query.
func (q uploadQueryQuery) One(exec boil.Executor) (*UploadQuery, error) {
	o := &UploadQuery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upload_queries")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UploadQuery records from the query using the global executor.
func (q uploadQueryQuery) AllG() (UploadQuerySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UploadQuery records from the query.
func (q uploadQueryQuery) All(exec boil.Executor) (UploadQuerySlice, error) {
	var o []*UploadQuery

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UploadQuery slice")
	}

	if len(uploadQueryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UploadQuery records in the query, and panics on error.
func (q uploadQueryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UploadQuery records in the query.
func (q uploadQueryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upload_queries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q uploadQueryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q uploadQueryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upload_queries exists")
	}

	return count > 0, nil
}

// Upload pointed to by the foreign key.
func (o *UploadQuery) Upload(mods ...qm.QueryMod) uploadQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UploadID),
	}

	queryMods = append(queryMods, mods...)

	query := Uploads(queryMods...)
	queries.SetFrom(query.Query, "\"uploads\"")

	return query
}

// LoadUpload allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadQueryL) LoadUpload(e boil.Executor, singular bool, maybeUploadQuery interface{}, mods queries.Applicator) error {
	var slice []*UploadQuery
	var object *UploadQuery

	if singular {
		object = maybeUploadQuery.(*UploadQuery)
	} else {
		slice = *maybeUploadQuery.(*[]*UploadQuery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uploadQueryR{}
		}
		args = append(args, object.UploadID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadQueryR{}
			}

			for _, a := range args {
				if a == obj.UploadID {
					continue Outer
				}
			}

			args = append(args, obj.UploadID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`uploads`), qm.WhereIn(`uploads.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Upload")
	}

	var resultSlice []*Upload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Upload")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for uploads")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uploads")
	}

	if len(uploadQueryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Upload = foreign
		if foreign.R == nil {
			foreign.R = &uploadR{}
		}
		foreign.R.UploadQuery = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UploadID == foreign.ID {
				local.R.Upload = foreign
				if foreign.R == nil {
					foreign.R = &uploadR{}
				}
				foreign.R.UploadQuery = local
				break
			}
		}
	}

	return nil
}

// SetUploadG of the uploadQuery to the related item.
// Sets o.R.Upload to related.
// Adds o to related.R.UploadQuery.
// Uses the global database handle.
func (o *UploadQuery) SetUploadG(insert bool, related *Upload) error {
	return o.SetUpload(boil.GetDB(), insert, related)
}

// SetUpload of the uploadQuery to the related item.
// Sets o.R.Upload to related.
// Adds o to related.R.UploadQuery.
func (o *UploadQuery) SetUpload(exec boil.Executor, insert bool, related *Upload) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upload_queries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
		strmangle.WhereClause("\"", "\"", 2, uploadQueryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UploadID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UploadID = related.ID
	if o.R == nil {
		o.R = &uploadQueryR{
			Upload: related,
		}
	} else {
		o.R.Upload = related
	}

	if related.R == nil {
		related.R = &uploadR{
			UploadQuery: o,
		}
	} else {
		related.R.UploadQuery = o
	}

	return nil
}

// UploadQueries retrieves all the records using an executor.
func UploadQueries(mods ...qm.QueryMod) uploadQueryQuery {
	mods = append(mods, qm.From("\"upload_queries\""))
	return uploadQueryQuery{NewQuery(mods...)}
}

// FindUploadQueryG retrieves a single record by ID.
func FindUploadQueryG(uploadID string, selectCols ...string) (*UploadQuery, error) {
	return FindUploadQuery(boil.GetDB(), uploadID, selectCols...)
}

// FindUploadQuery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadQuery(exec boil.Executor, uploadID string, selectCols ...string) (*UploadQuery, error) {
	uploadQueryObj := &UploadQuery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upload_queries\" where \"upload_id\"=$1", sel,
	)

	q := queries.Raw(query, uploadID)

	err := q.Bind(nil, exec, uploadQueryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upload_queries")
	}

	return uploadQueryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UploadQuery) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadQuery) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_queries provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadQueryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadQueryInsertCacheMut.RLock()
	cache, cached := uploadQueryInsertCache[key]
	uploadQueryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadQueryAllColumns,
			uploadQueryColumnsWithDefault,
			uploadQueryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadQueryType, uploadQueryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadQueryType, uploadQueryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upload_queries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upload_queries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upload_queries")
	}

	if !cached {
		uploadQueryInsertCacheMut.Lock()
		uploadQueryInsertCache[key] = cache
		uploadQueryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UploadQuery record using the global executor.
// See Update for more documentation.
func (o *UploadQuery) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UploadQuery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadQuery) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadQueryUpdateCacheMut.RLock()
	cache, cached := uploadQueryUpdateCache[key]
	uploadQueryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadQueryAllColumns,
			uploadQueryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update upload_queries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upload_queries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadQueryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadQueryType, uploadQueryMapping, append(wl, uploadQueryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update upload_queries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for upload_queries")
	}

	if !cached {
		uploadQueryUpdateCacheMut.Lock()
		uploadQueryUpdateCache[key] = cache
		uploadQueryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q uploadQueryQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadQueryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for upload_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for upload_queries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UploadQuerySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadQuerySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upload_queries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadQueryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uploadQuery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uploadQuery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UploadQuery) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadQuery) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_queries provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadQueryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadQueryUpsertCacheMut.RLock()
	cache, cached := uploadQueryUpsertCache[key]
	uploadQueryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uploadQueryAllColumns,
			uploadQueryColumnsWithDefault,
			uploadQueryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			uploadQueryAllColumns,
			uploadQueryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert upload_queries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uploadQueryPrimaryKeyColumns))
			copy(conflict, uploadQueryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"upload_queries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uploadQueryType, uploadQueryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadQueryType, uploadQueryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upload_queries")
	}

	if !cached {
		uploadQueryUpsertCacheMut.Lock()
		uploadQueryUpsertCache[key] = cache
		uploadQueryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UploadQuery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UploadQuery) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UploadQuery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadQuery) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UploadQuery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadQueryPrimaryKeyMapping)
	sql := "DELETE FROM \"upload_queries\" WHERE \"upload_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from upload_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for upload_queries")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadQueryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadQueryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload_queries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_queries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UploadQuerySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadQuerySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadQueryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upload_queries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadQueryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploadQuery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_queries")
	}

	if len(uploadQueryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UploadQuery) ReloadG() error {
	if o == nil {
		return errors.New("models: no UploadQuery provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadQuery) Reload(exec boil.Executor) error {
	ret, err := FindUploadQuery(exec, o.UploadID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadQuerySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UploadQuerySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadQuerySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadQuerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadQueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upload_queries\".* FROM \"upload_queries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadQueryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadQuerySlice")
	}

	*o = slice

	return nil
}

// UploadQueryExistsG checks if the UploadQuery row exists.
func UploadQueryExistsG(uploadID string) (bool, error) {
	return UploadQueryExists(boil.GetDB(), uploadID)
}

// UploadQueryExists checks if the UploadQuery row exists.
func UploadQueryExists(exec boil.Executor, uploadID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upload_queries\" where \"upload_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, uploadID)
	}
	row := exec.QueryRow(sql, uploadID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upload_queries exists")
	}

	return exists, nil
}
