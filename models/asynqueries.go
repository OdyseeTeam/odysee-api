// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Asynquery is an object representing the database table.
type Asynquery struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error     string    `boil:"error" json:"error" toml:"error" yaml:"error"`
	UploadID  string    `boil:"upload_id" json:"upload_id" toml:"upload_id" yaml:"upload_id"`
	Body      null.JSON `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	Response  null.JSON `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`

	R *asynqueryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L asynqueryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AsynqueryColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	UpdatedAt string
	Status    string
	Error     string
	UploadID  string
	Body      string
	Response  string
}{
	ID:        "id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Status:    "status",
	Error:     "error",
	UploadID:  "upload_id",
	Body:      "body",
	Response:  "response",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AsynqueryWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Status    whereHelperstring
	Error     whereHelperstring
	UploadID  whereHelperstring
	Body      whereHelpernull_JSON
	Response  whereHelpernull_JSON
}{
	ID:        whereHelperstring{field: "\"asynqueries\".\"id\""},
	UserID:    whereHelperint{field: "\"asynqueries\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"asynqueries\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"asynqueries\".\"updated_at\""},
	Status:    whereHelperstring{field: "\"asynqueries\".\"status\""},
	Error:     whereHelperstring{field: "\"asynqueries\".\"error\""},
	UploadID:  whereHelperstring{field: "\"asynqueries\".\"upload_id\""},
	Body:      whereHelpernull_JSON{field: "\"asynqueries\".\"body\""},
	Response:  whereHelpernull_JSON{field: "\"asynqueries\".\"response\""},
}

// AsynqueryRels is where relationship names are stored.
var AsynqueryRels = struct {
	User string
}{
	User: "User",
}

// asynqueryR is where relationships are stored.
type asynqueryR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*asynqueryR) NewStruct() *asynqueryR {
	return &asynqueryR{}
}

// asynqueryL is where Load methods for each relationship are stored.
type asynqueryL struct{}

var (
	asynqueryAllColumns            = []string{"id", "user_id", "created_at", "updated_at", "status", "error", "upload_id", "body", "response"}
	asynqueryColumnsWithoutDefault = []string{"id", "user_id", "updated_at", "status", "error", "upload_id", "body", "response"}
	asynqueryColumnsWithDefault    = []string{"created_at"}
	asynqueryPrimaryKeyColumns     = []string{"id"}
)

type (
	// AsynquerySlice is an alias for a slice of pointers to Asynquery.
	// This should generally be used opposed to []Asynquery.
	AsynquerySlice []*Asynquery
	// AsynqueryHook is the signature for custom Asynquery hook methods
	AsynqueryHook func(boil.Executor, *Asynquery) error

	asynqueryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	asynqueryType                 = reflect.TypeOf(&Asynquery{})
	asynqueryMapping              = queries.MakeStructMapping(asynqueryType)
	asynqueryPrimaryKeyMapping, _ = queries.BindMapping(asynqueryType, asynqueryMapping, asynqueryPrimaryKeyColumns)
	asynqueryInsertCacheMut       sync.RWMutex
	asynqueryInsertCache          = make(map[string]insertCache)
	asynqueryUpdateCacheMut       sync.RWMutex
	asynqueryUpdateCache          = make(map[string]updateCache)
	asynqueryUpsertCacheMut       sync.RWMutex
	asynqueryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var asynqueryBeforeInsertHooks []AsynqueryHook
var asynqueryBeforeUpdateHooks []AsynqueryHook
var asynqueryBeforeDeleteHooks []AsynqueryHook
var asynqueryBeforeUpsertHooks []AsynqueryHook

var asynqueryAfterInsertHooks []AsynqueryHook
var asynqueryAfterSelectHooks []AsynqueryHook
var asynqueryAfterUpdateHooks []AsynqueryHook
var asynqueryAfterDeleteHooks []AsynqueryHook
var asynqueryAfterUpsertHooks []AsynqueryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Asynquery) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Asynquery) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Asynquery) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Asynquery) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Asynquery) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Asynquery) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Asynquery) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Asynquery) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Asynquery) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asynqueryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAsynqueryHook registers your hook function for all future operations.
func AddAsynqueryHook(hookPoint boil.HookPoint, asynqueryHook AsynqueryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		asynqueryBeforeInsertHooks = append(asynqueryBeforeInsertHooks, asynqueryHook)
	case boil.BeforeUpdateHook:
		asynqueryBeforeUpdateHooks = append(asynqueryBeforeUpdateHooks, asynqueryHook)
	case boil.BeforeDeleteHook:
		asynqueryBeforeDeleteHooks = append(asynqueryBeforeDeleteHooks, asynqueryHook)
	case boil.BeforeUpsertHook:
		asynqueryBeforeUpsertHooks = append(asynqueryBeforeUpsertHooks, asynqueryHook)
	case boil.AfterInsertHook:
		asynqueryAfterInsertHooks = append(asynqueryAfterInsertHooks, asynqueryHook)
	case boil.AfterSelectHook:
		asynqueryAfterSelectHooks = append(asynqueryAfterSelectHooks, asynqueryHook)
	case boil.AfterUpdateHook:
		asynqueryAfterUpdateHooks = append(asynqueryAfterUpdateHooks, asynqueryHook)
	case boil.AfterDeleteHook:
		asynqueryAfterDeleteHooks = append(asynqueryAfterDeleteHooks, asynqueryHook)
	case boil.AfterUpsertHook:
		asynqueryAfterUpsertHooks = append(asynqueryAfterUpsertHooks, asynqueryHook)
	}
}

// OneG returns a single asynquery record from the query using the global executor.
func (q asynqueryQuery) OneG() (*Asynquery, error) {
	return q.One(boil.GetDB())
}

// One returns a single asynquery record from the query.
func (q asynqueryQuery) One(exec boil.Executor) (*Asynquery, error) {
	o := &Asynquery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for asynqueries")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Asynquery records from the query using the global executor.
func (q asynqueryQuery) AllG() (AsynquerySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Asynquery records from the query.
func (q asynqueryQuery) All(exec boil.Executor) (AsynquerySlice, error) {
	var o []*Asynquery

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Asynquery slice")
	}

	if len(asynqueryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Asynquery records in the query, and panics on error.
func (q asynqueryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Asynquery records in the query.
func (q asynqueryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count asynqueries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q asynqueryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q asynqueryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if asynqueries exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Asynquery) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asynqueryL) LoadUser(e boil.Executor, singular bool, maybeAsynquery interface{}, mods queries.Applicator) error {
	var slice []*Asynquery
	var object *Asynquery

	if singular {
		object = maybeAsynquery.(*Asynquery)
	} else {
		slice = *maybeAsynquery.(*[]*Asynquery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asynqueryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asynqueryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(asynqueryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Asynqueries = append(foreign.R.Asynqueries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Asynqueries = append(foreign.R.Asynqueries, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the asynquery to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Asynqueries.
// Uses the global database handle.
func (o *Asynquery) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the asynquery to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Asynqueries.
func (o *Asynquery) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asynqueries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, asynqueryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &asynqueryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Asynqueries: AsynquerySlice{o},
		}
	} else {
		related.R.Asynqueries = append(related.R.Asynqueries, o)
	}

	return nil
}

// Asynqueries retrieves all the records using an executor.
func Asynqueries(mods ...qm.QueryMod) asynqueryQuery {
	mods = append(mods, qm.From("\"asynqueries\""))
	return asynqueryQuery{NewQuery(mods...)}
}

// FindAsynqueryG retrieves a single record by ID.
func FindAsynqueryG(iD string, selectCols ...string) (*Asynquery, error) {
	return FindAsynquery(boil.GetDB(), iD, selectCols...)
}

// FindAsynquery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsynquery(exec boil.Executor, iD string, selectCols ...string) (*Asynquery, error) {
	asynqueryObj := &Asynquery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asynqueries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, asynqueryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from asynqueries")
	}

	return asynqueryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Asynquery) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Asynquery) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asynqueries provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asynqueryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	asynqueryInsertCacheMut.RLock()
	cache, cached := asynqueryInsertCache[key]
	asynqueryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			asynqueryAllColumns,
			asynqueryColumnsWithDefault,
			asynqueryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(asynqueryType, asynqueryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(asynqueryType, asynqueryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asynqueries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asynqueries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into asynqueries")
	}

	if !cached {
		asynqueryInsertCacheMut.Lock()
		asynqueryInsertCache[key] = cache
		asynqueryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Asynquery record using the global executor.
// See Update for more documentation.
func (o *Asynquery) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Asynquery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Asynquery) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	asynqueryUpdateCacheMut.RLock()
	cache, cached := asynqueryUpdateCache[key]
	asynqueryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			asynqueryAllColumns,
			asynqueryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update asynqueries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asynqueries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, asynqueryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(asynqueryType, asynqueryMapping, append(wl, asynqueryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update asynqueries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for asynqueries")
	}

	if !cached {
		asynqueryUpdateCacheMut.Lock()
		asynqueryUpdateCache[key] = cache
		asynqueryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q asynqueryQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q asynqueryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for asynqueries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for asynqueries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AsynquerySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AsynquerySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asynqueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asynqueries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, asynqueryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in asynquery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all asynquery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Asynquery) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Asynquery) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asynqueries provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asynqueryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	asynqueryUpsertCacheMut.RLock()
	cache, cached := asynqueryUpsertCache[key]
	asynqueryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			asynqueryAllColumns,
			asynqueryColumnsWithDefault,
			asynqueryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			asynqueryAllColumns,
			asynqueryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert asynqueries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(asynqueryPrimaryKeyColumns))
			copy(conflict, asynqueryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asynqueries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(asynqueryType, asynqueryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(asynqueryType, asynqueryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert asynqueries")
	}

	if !cached {
		asynqueryUpsertCacheMut.Lock()
		asynqueryUpsertCache[key] = cache
		asynqueryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Asynquery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Asynquery) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Asynquery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Asynquery) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Asynquery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), asynqueryPrimaryKeyMapping)
	sql := "DELETE FROM \"asynqueries\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from asynqueries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for asynqueries")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q asynqueryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no asynqueryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asynqueries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asynqueries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AsynquerySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AsynquerySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(asynqueryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asynqueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asynqueries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asynqueryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asynquery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asynqueries")
	}

	if len(asynqueryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Asynquery) ReloadG() error {
	if o == nil {
		return errors.New("models: no Asynquery provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Asynquery) Reload(exec boil.Executor) error {
	ret, err := FindAsynquery(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AsynquerySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AsynquerySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AsynquerySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AsynquerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asynqueryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asynqueries\".* FROM \"asynqueries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asynqueryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AsynquerySlice")
	}

	*o = slice

	return nil
}

// AsynqueryExistsG checks if the Asynquery row exists.
func AsynqueryExistsG(iD string) (bool, error) {
	return AsynqueryExists(boil.GetDB(), iD)
}

// AsynqueryExists checks if the Asynquery row exists.
func AsynqueryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asynqueries\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if asynqueries exists")
	}

	return exists, nil
}
