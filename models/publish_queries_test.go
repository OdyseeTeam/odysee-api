// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublishQueries(t *testing.T) {
	t.Parallel()

	query := PublishQueries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublishQueriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublishQueriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublishQueries().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublishQueriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublishQuerySlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublishQueriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublishQueryExists(tx, o.UploadID)
	if err != nil {
		t.Errorf("Unable to check if PublishQuery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublishQueryExists to return true, but got false.")
	}
}

func testPublishQueriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publishQueryFound, err := FindPublishQuery(tx, o.UploadID)
	if err != nil {
		t.Error(err)
	}

	if publishQueryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublishQueriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublishQueries().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublishQueriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublishQueries().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublishQueriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publishQueryOne := &PublishQuery{}
	publishQueryTwo := &PublishQuery{}
	if err = randomize.Struct(seed, publishQueryOne, publishQueryDBTypes, false, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}
	if err = randomize.Struct(seed, publishQueryTwo, publishQueryDBTypes, false, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = publishQueryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publishQueryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublishQueries().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublishQueriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publishQueryOne := &PublishQuery{}
	publishQueryTwo := &PublishQuery{}
	if err = randomize.Struct(seed, publishQueryOne, publishQueryDBTypes, false, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}
	if err = randomize.Struct(seed, publishQueryTwo, publishQueryDBTypes, false, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = publishQueryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publishQueryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publishQueryBeforeInsertHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryAfterInsertHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryAfterSelectHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryBeforeUpdateHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryAfterUpdateHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryBeforeDeleteHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryAfterDeleteHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryBeforeUpsertHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func publishQueryAfterUpsertHook(e boil.Executor, o *PublishQuery) error {
	*o = PublishQuery{}
	return nil
}

func testPublishQueriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &PublishQuery{}
	o := &PublishQuery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publishQueryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublishQuery object: %s", err)
	}

	AddPublishQueryHook(boil.BeforeInsertHook, publishQueryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publishQueryBeforeInsertHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.AfterInsertHook, publishQueryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publishQueryAfterInsertHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.AfterSelectHook, publishQueryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publishQueryAfterSelectHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.BeforeUpdateHook, publishQueryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publishQueryBeforeUpdateHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.AfterUpdateHook, publishQueryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publishQueryAfterUpdateHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.BeforeDeleteHook, publishQueryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publishQueryBeforeDeleteHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.AfterDeleteHook, publishQueryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publishQueryAfterDeleteHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.BeforeUpsertHook, publishQueryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publishQueryBeforeUpsertHooks = []PublishQueryHook{}

	AddPublishQueryHook(boil.AfterUpsertHook, publishQueryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publishQueryAfterUpsertHooks = []PublishQueryHook{}
}

func testPublishQueriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublishQueriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(publishQueryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublishQueryToOneUploadUsingUpload(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PublishQuery
	var foreign Upload

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publishQueryDBTypes, false, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, uploadDBTypes, false, uploadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UploadID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Upload().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PublishQuerySlice{&local}
	if err = local.L.LoadUpload(tx, false, (*[]*PublishQuery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Upload == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Upload = nil
	if err = local.L.LoadUpload(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Upload == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPublishQueryToOneSetOpUploadUsingUpload(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PublishQuery
	var b, c Upload

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publishQueryDBTypes, false, strmangle.SetComplement(publishQueryPrimaryKeyColumns, publishQueryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadDBTypes, false, strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Upload{&b, &c} {
		err = a.SetUpload(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Upload != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PublishQuery != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UploadID != x.ID {
			t.Error("foreign key was wrong value", a.UploadID)
		}

		if exists, err := PublishQueryExists(tx, a.UploadID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testPublishQueriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPublishQueriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublishQuerySlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPublishQueriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublishQueries().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publishQueryDBTypes = map[string]string{`UploadID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Status`: `enum.publish_query_status('received','forwarded','failed','succeeded')`, `Error`: `text`, `Query`: `jsonb`, `Response`: `jsonb`}
	_                   = bytes.MinRead
)

func testPublishQueriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publishQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publishQueryAllColumns) == len(publishQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublishQueriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publishQueryAllColumns) == len(publishQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublishQuery{}
	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publishQueryDBTypes, true, publishQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publishQueryAllColumns, publishQueryPrimaryKeyColumns) {
		fields = publishQueryAllColumns
	} else {
		fields = strmangle.SetComplement(
			publishQueryAllColumns,
			publishQueryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublishQuerySlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPublishQueriesUpsert(t *testing.T) {
	t.Parallel()

	if len(publishQueryAllColumns) == len(publishQueryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublishQuery{}
	if err = randomize.Struct(seed, &o, publishQueryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublishQuery: %s", err)
	}

	count, err := PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publishQueryDBTypes, false, publishQueryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublishQuery struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublishQuery: %s", err)
	}

	count, err = PublishQueries().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
