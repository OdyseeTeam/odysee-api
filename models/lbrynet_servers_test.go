// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLbrynetServers(t *testing.T) {
	t.Parallel()

	query := LbrynetServers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLbrynetServersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLbrynetServersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LbrynetServers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLbrynetServersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LbrynetServerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLbrynetServersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LbrynetServerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LbrynetServer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LbrynetServerExists to return true, but got false.")
	}
}

func testLbrynetServersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lbrynetServerFound, err := FindLbrynetServer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lbrynetServerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLbrynetServersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LbrynetServers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testLbrynetServersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LbrynetServers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLbrynetServersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lbrynetServerOne := &LbrynetServer{}
	lbrynetServerTwo := &LbrynetServer{}
	if err = randomize.Struct(seed, lbrynetServerOne, lbrynetServerDBTypes, false, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}
	if err = randomize.Struct(seed, lbrynetServerTwo, lbrynetServerDBTypes, false, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = lbrynetServerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lbrynetServerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LbrynetServers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLbrynetServersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lbrynetServerOne := &LbrynetServer{}
	lbrynetServerTwo := &LbrynetServer{}
	if err = randomize.Struct(seed, lbrynetServerOne, lbrynetServerDBTypes, false, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}
	if err = randomize.Struct(seed, lbrynetServerTwo, lbrynetServerDBTypes, false, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = lbrynetServerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lbrynetServerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lbrynetServerBeforeInsertHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerAfterInsertHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerAfterSelectHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerBeforeUpdateHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerAfterUpdateHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerBeforeDeleteHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerAfterDeleteHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerBeforeUpsertHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func lbrynetServerAfterUpsertHook(e boil.Executor, o *LbrynetServer) error {
	*o = LbrynetServer{}
	return nil
}

func testLbrynetServersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &LbrynetServer{}
	o := &LbrynetServer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LbrynetServer object: %s", err)
	}

	AddLbrynetServerHook(boil.BeforeInsertHook, lbrynetServerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lbrynetServerBeforeInsertHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.AfterInsertHook, lbrynetServerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lbrynetServerAfterInsertHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.AfterSelectHook, lbrynetServerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lbrynetServerAfterSelectHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.BeforeUpdateHook, lbrynetServerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lbrynetServerBeforeUpdateHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.AfterUpdateHook, lbrynetServerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lbrynetServerAfterUpdateHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.BeforeDeleteHook, lbrynetServerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lbrynetServerBeforeDeleteHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.AfterDeleteHook, lbrynetServerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lbrynetServerAfterDeleteHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.BeforeUpsertHook, lbrynetServerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lbrynetServerBeforeUpsertHooks = []LbrynetServerHook{}

	AddLbrynetServerHook(boil.AfterUpsertHook, lbrynetServerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lbrynetServerAfterUpsertHooks = []LbrynetServerHook{}
}

func testLbrynetServersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLbrynetServersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(lbrynetServerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLbrynetServerToManyUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LbrynetServer
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LbrynetServerID, a.ID)
	queries.Assign(&c.LbrynetServerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LbrynetServerID, b.LbrynetServerID) {
			bFound = true
		}
		if queries.Equal(v.LbrynetServerID, c.LbrynetServerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LbrynetServerSlice{&a}
	if err = a.L.LoadUsers(tx, false, (*[]*LbrynetServer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLbrynetServerToManyAddOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LbrynetServer
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lbrynetServerDBTypes, false, strmangle.SetComplement(lbrynetServerPrimaryKeyColumns, lbrynetServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LbrynetServerID) {
			t.Error("foreign key was wrong value", a.ID, first.LbrynetServerID)
		}
		if !queries.Equal(a.ID, second.LbrynetServerID) {
			t.Error("foreign key was wrong value", a.ID, second.LbrynetServerID)
		}

		if first.R.LbrynetServer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LbrynetServer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLbrynetServerToManySetOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LbrynetServer
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lbrynetServerDBTypes, false, strmangle.SetComplement(lbrynetServerPrimaryKeyColumns, lbrynetServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LbrynetServerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LbrynetServerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LbrynetServerID) {
		t.Error("foreign key was wrong value", a.ID, d.LbrynetServerID)
	}
	if !queries.Equal(a.ID, e.LbrynetServerID) {
		t.Error("foreign key was wrong value", a.ID, e.LbrynetServerID)
	}

	if b.R.LbrynetServer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LbrynetServer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LbrynetServer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LbrynetServer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testLbrynetServerToManyRemoveOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LbrynetServer
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lbrynetServerDBTypes, false, strmangle.SetComplement(lbrynetServerPrimaryKeyColumns, lbrynetServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LbrynetServerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LbrynetServerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LbrynetServer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LbrynetServer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LbrynetServer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LbrynetServer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testLbrynetServersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLbrynetServersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LbrynetServerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testLbrynetServersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LbrynetServers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lbrynetServerDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Address`: `character varying`, `Weight`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Private`: `boolean`}
	_                    = bytes.MinRead
)

func testLbrynetServersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lbrynetServerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lbrynetServerAllColumns) == len(lbrynetServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLbrynetServersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lbrynetServerAllColumns) == len(lbrynetServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LbrynetServer{}
	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lbrynetServerDBTypes, true, lbrynetServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lbrynetServerAllColumns, lbrynetServerPrimaryKeyColumns) {
		fields = lbrynetServerAllColumns
	} else {
		fields = strmangle.SetComplement(
			lbrynetServerAllColumns,
			lbrynetServerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LbrynetServerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLbrynetServersUpsert(t *testing.T) {
	t.Parallel()

	if len(lbrynetServerAllColumns) == len(lbrynetServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LbrynetServer{}
	if err = randomize.Struct(seed, &o, lbrynetServerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LbrynetServer: %s", err)
	}

	count, err := LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lbrynetServerDBTypes, false, lbrynetServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LbrynetServer struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LbrynetServer: %s", err)
	}

	count, err = LbrynetServers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
