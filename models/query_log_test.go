// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueryLogs(t *testing.T) {
	t.Parallel()

	query := QueryLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueryLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueryLogs().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryLogSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueryLogExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueryLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueryLogExists to return true, but got false.")
	}
}

func testQueryLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queryLogFound, err := FindQueryLog(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queryLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueryLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueryLogs().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueryLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueryLogs().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueryLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queryLogOne := &QueryLog{}
	queryLogTwo := &QueryLog{}
	if err = randomize.Struct(seed, queryLogOne, queryLogDBTypes, false, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}
	if err = randomize.Struct(seed, queryLogTwo, queryLogDBTypes, false, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = queryLogOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryLogTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryLogs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueryLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queryLogOne := &QueryLog{}
	queryLogTwo := &QueryLog{}
	if err = randomize.Struct(seed, queryLogOne, queryLogDBTypes, false, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}
	if err = randomize.Struct(seed, queryLogTwo, queryLogDBTypes, false, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = queryLogOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryLogTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queryLogBeforeInsertHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogAfterInsertHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogAfterSelectHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogBeforeUpdateHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogAfterUpdateHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogBeforeDeleteHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogAfterDeleteHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogBeforeUpsertHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func queryLogAfterUpsertHook(e boil.Executor, o *QueryLog) error {
	*o = QueryLog{}
	return nil
}

func testQueryLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &QueryLog{}
	o := &QueryLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queryLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueryLog object: %s", err)
	}

	AddQueryLogHook(boil.BeforeInsertHook, queryLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queryLogBeforeInsertHooks = []QueryLogHook{}

	AddQueryLogHook(boil.AfterInsertHook, queryLogAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queryLogAfterInsertHooks = []QueryLogHook{}

	AddQueryLogHook(boil.AfterSelectHook, queryLogAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queryLogAfterSelectHooks = []QueryLogHook{}

	AddQueryLogHook(boil.BeforeUpdateHook, queryLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queryLogBeforeUpdateHooks = []QueryLogHook{}

	AddQueryLogHook(boil.AfterUpdateHook, queryLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queryLogAfterUpdateHooks = []QueryLogHook{}

	AddQueryLogHook(boil.BeforeDeleteHook, queryLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queryLogBeforeDeleteHooks = []QueryLogHook{}

	AddQueryLogHook(boil.AfterDeleteHook, queryLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queryLogAfterDeleteHooks = []QueryLogHook{}

	AddQueryLogHook(boil.BeforeUpsertHook, queryLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queryLogBeforeUpsertHooks = []QueryLogHook{}

	AddQueryLogHook(boil.AfterUpsertHook, queryLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queryLogAfterUpsertHooks = []QueryLogHook{}
}

func testQueryLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(queryLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testQueryLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryLogSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testQueryLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryLogs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queryLogDBTypes = map[string]string{`ID`: `integer`, `Method`: `character varying`, `Timestamp`: `timestamp without time zone`, `UserID`: `integer`, `RemoteIP`: `character varying`, `Body`: `jsonb`}
	_               = bytes.MinRead
)

func testQueryLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queryLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queryLogAllColumns) == len(queryLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueryLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queryLogAllColumns) == len(queryLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryLog{}
	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryLogDBTypes, true, queryLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queryLogAllColumns, queryLogPrimaryKeyColumns) {
		fields = queryLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			queryLogAllColumns,
			queryLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueryLogSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueryLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(queryLogAllColumns) == len(queryLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueryLog{}
	if err = randomize.Struct(seed, &o, queryLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryLog: %s", err)
	}

	count, err := QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queryLogDBTypes, false, queryLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryLog struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryLog: %s", err)
	}

	count, err = QueryLogs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
