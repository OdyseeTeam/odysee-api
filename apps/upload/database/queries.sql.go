// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package database

import (
	"context"
)

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (
    id, user_id, size, status, filename, key
) VALUES (
  $1, $2, $3, 'created', '', ''
)
RETURNING id, user_id, filename, key, created_at, updated_at, status, size, received
`

type CreateUploadParams struct {
	ID     string
	UserID string
	Size   int64
}

func (q *Queries) CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createUpload, arg.ID, arg.UserID, arg.Size)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Size,
		&i.Received,
	)
	return i, err
}

const getUpload = `-- name: GetUpload :one
SELECT id, user_id, filename, key, created_at, updated_at, status, size, received FROM uploads
WHERE user_id = $1 AND id = $2
`

type GetUploadParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetUpload(ctx context.Context, arg GetUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, getUpload, arg.UserID, arg.ID)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Size,
		&i.Received,
	)
	return i, err
}

const markUploadCompleted = `-- name: MarkUploadCompleted :exec
UPDATE uploads SET
    updated_at = NOW(),
    status = 'completed',
    filename = $3,
    key = $4
WHERE user_id = $1 AND id = $2
`

type MarkUploadCompletedParams struct {
	UserID   string
	ID       string
	Filename string
	Key      string
}

func (q *Queries) MarkUploadCompleted(ctx context.Context, arg MarkUploadCompletedParams) error {
	_, err := q.db.ExecContext(ctx, markUploadCompleted,
		arg.UserID,
		arg.ID,
		arg.Filename,
		arg.Key,
	)
	return err
}

const markUploadTerminated = `-- name: MarkUploadTerminated :exec
UPDATE uploads SET
    updated_at = NOW(),
    status = 'completed'
WHERE user_id = $1 AND id = $2
`

type MarkUploadTerminatedParams struct {
	UserID string
	ID     string
}

func (q *Queries) MarkUploadTerminated(ctx context.Context, arg MarkUploadTerminatedParams) error {
	_, err := q.db.ExecContext(ctx, markUploadTerminated, arg.UserID, arg.ID)
	return err
}

const recordUploadProgress = `-- name: RecordUploadProgress :exec
UPDATE uploads SET
    updated_at = NOW(),
    received = $3
WHERE user_id = $1 AND id = $2 AND status IN ('receiving', 'created')
`

type RecordUploadProgressParams struct {
	UserID   string
	ID       string
	Received int64
}

func (q *Queries) RecordUploadProgress(ctx context.Context, arg RecordUploadProgressParams) error {
	_, err := q.db.ExecContext(ctx, recordUploadProgress, arg.UserID, arg.ID, arg.Received)
	return err
}
