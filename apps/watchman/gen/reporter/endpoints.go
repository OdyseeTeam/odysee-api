// Code generated by goa v3.5.2, DO NOT EDIT.
//
// reporter endpoints
//
// Command:
// $ goa gen github.com/OdyseeTeam/odysee-api/apps/watchman/design -o apps/watchman

package reporter

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "reporter" service endpoints.
type Endpoints struct {
	Add     goa.Endpoint
	Healthz goa.Endpoint
}

// NewEndpoints wraps the methods of the "reporter" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Add:     NewAddEndpoint(s),
		Healthz: NewHealthzEndpoint(s),
	}
}

// Use applies the given middleware to all the "reporter" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Add = m(e.Add)
	e.Healthz = m(e.Healthz)
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "reporter".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PlaybackReport)
		return nil, s.Add(ctx, p)
	}
}

// NewHealthzEndpoint returns an endpoint function that calls the method
// "healthz" of service "reporter".
func NewHealthzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Healthz(ctx)
	}
}
